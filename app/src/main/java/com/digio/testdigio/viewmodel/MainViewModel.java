package com.digio.testdigio.viewmodel;

import android.content.Context;

import androidx.databinding.ObservableField;
import androidx.lifecycle.MutableLiveData;
import androidx.lifecycle.ViewModel;

import com.digio.testdigio.api.ApiInterface;
import com.digio.testdigio.api.NetworkAuth;
import com.digio.testdigio.api.RetrofitApi;
import com.digio.testdigio.model.ResponseBody;
import com.digio.testdigio.model.request.DocumentRequest;
import com.digio.testdigio.model.request.Signer;

import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.List;

import io.reactivex.Observer;
import io.reactivex.android.schedulers.AndroidSchedulers;
import io.reactivex.schedulers.Schedulers;

public class MainViewModel extends ViewModel {

    private Context context;
    DocumentRequest documentRequest = new DocumentRequest();
    Signer signer = new Signer();
    ResponseBody responseBody;
    public final ObservableField<String> error = new ObservableField<>();
    public MutableLiveData<String> id = new MutableLiveData<>();
    public MutableLiveData<String> name = new MutableLiveData<>();
    public MutableLiveData<String> emailid = new MutableLiveData<>();
    public MutableLiveData<ResponseBody> responseBodyMutableLiveData = new MutableLiveData<>();

    public MutableLiveData<ResponseBody> getresponseBodyMutableLiveData(){
        return responseBodyMutableLiveData;
    }

    public MainViewModel(Context context) {
        this.context = context;
    }

    public MainViewModel() {
    }

    public void uploadDocument(Observer observer){
        new RetrofitApi().getRetrofit().create(ApiInterface.class)
                .uploadDocument(NetworkAuth.getAuthToken(), documentRequest)
                .observeOn(AndroidSchedulers.mainThread())
                .subscribeOn(Schedulers.io())
        .subscribe(observer);
    }

    public void setData(Observer observer, String doc) throws FileNotFoundException {

        List<Signer> signerslist = new ArrayList<>();
        //String dodf= "";
        signer.setIdentifier("sheetal.321j@gmail.com");
        signer.setName("Subhasmita Jani");
        signer.setReason("Some Agreement");
        signerslist.add(signer);
        documentRequest.setSigners(signerslist);

        documentRequest.setFileData(doc);
        documentRequest.setFileName("test.pdf");
        documentRequest.setDisplayOnPage("all");
        documentRequest.setExpireInDays(10);
        uploadDocument(observer);
    }

    public void updateData(ResponseBody response){
        responseBody = response;
    }

    public void getData() {
                id.setValue(responseBody == null? null : responseBody.getId());
                name.setValue(responseBody == null? null : responseBody.getSigningParties().get(0).getName());
                emailid.setValue(responseBody == null? null : responseBody.getSigningParties().get(0).getIdentifier());
    }

    public void getError(String errormessage) {
        error.set(errormessage);
    }
}
